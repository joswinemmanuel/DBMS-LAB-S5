/* 1) Factorial Function */
CREATE OR REPLACE FUNCTION factorial(n INT)
RETURN INT AS fac INT;
BEGIN
  fac:=1;
  FOR i IN 1..n LOOP 
    fac:=i*fac;         
  END LOOP;
  RETURN fac;   
END;

DECLARE 
  num INT;
  res INT;
BEGIN
  num:=&num;
  res:=factorial(num);
  dbms_output.put_line('FACTORIAL IS ' ||res);
END;

/* 2) Update Mark Procedure */
CREATE TABLE student_details(
  roll INT,
  marks INT,
  phone INT
);

INSERT INTO student_details VALUES(1, 20, 9526547719);
INSERT INTO student_details VALUES(2, 30, 4526547719);
INSERT INTO student_details VALUES(3, 10, 6526547719);
INSERT INTO student_details VALUES(4, 12, 8226547719);
INSERT INTO student_details VALUES(5, 16, 9226547719);
INSERT INTO student_details VALUES(6, 25, 6026547719);

SELECT * FROM student_details;

CREATE OR REPLACE PROCEDURE pr1
AS
BEGIN
  UPDATE student_details
  SET marks=marks+marks*(5/100);
END;

BEGIN
  pr1;
END;

SELECT * FROM student_details;

/* 3) */
DROP TABLE STUDENT;
CREATE TABLE student(
  ID INT,
  NAME VARCHAR(50),
  m1 INT,
  m2 INT,
  m3 INT,
  total INT,
  grade VARCHAR(10)
);

/* Triggers */
CREATE TABLE customer_details(
  cust_id INT UNIQUE,
  cust_name VARCHAR(50),
  address VARCHAR(50)
);

CREATE TABLE emp_details(
  empid INT UNIQUE,
  empname VARCHAR(50),
  salary INT
);

CREATE TABLE cust_count(
  count_row INT
);

/* Trigger 1 */
CREATE OR REPLACE TRIGGER tr1
AFTER INSERT
ON customer_details
FOR EACH ROW
BEGIN
  dbms_output.put_line('My new ROW is inserted');
END;

INSERT INTO customer_details VALUES(1, 'Kevin', 'Pala');
/*
OUTPUT
1 rows inserted.
My new ROW is inserted
*/

/* Trigger 2 */
CREATE OR REPLACE TRIGGER tr2
AFTER INSERT
ON emp_details
FOR EACH ROW
WHEN (new.salary>20000)
BEGIN
  dbms_output.put_line('Salary value > 20000');
END;

INSERT INTO emp_details VALUES(101, 'Bieber', 20001);
/*
OUTPUT
1 rows inserted.
Salary value > 20000
*/

/* Trigger 3 */
CREATE OR REPLACE TRIGGER tr3
BEFORE INSERT OR DELETE
ON customer_details 
FOR EACH ROW
BEGIN
  IF deleting THEN
    UPDATE cust_count
    SET count_row=count_row-1;
  ELSE
    UPDATE cust_count
    SET count_row=count_row+1;
  END IF;
END;

SELECT * FROM cust_count;
/* OUTPUT : 0 */
INSERT INTO customer_details VALUES(1, 'RON', 'Pala');
SELECT * FROM cust_count;
/* OUTPUT : 1 */

/* Trigger 4 */

CREATE TABLE deleted(
  empid INT UNIQUE,
  empname VARCHAR(50),
  salary INT
);

CREATE TABLE updated(
  empid INT UNIQUE,
  empname VARCHAR(50),
  salary INT
);

CREATE OR REPLACE TRIGGER tr4
BEFORE INSERT OR DELETE
ON emp_details
FOR EACH ROW
BEGIN
  IF deleting THEN
    INSERT INTO deleted VALUES(OLD.empid, OLD.empname, OLD.salary);
  ELSE
    INSERT INTO updated VALUES(new.empid, new.empname, new.salary);
  END IF;
END;
